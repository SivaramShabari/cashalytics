// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String         @unique
  emailVerified DateTime?
  accounts      Account[]
  moneyAccounts MoneyAccount[]
  image         String?
  sessions      Session[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  transactions  Transaction[]
  Category      Category[]
}

model MoneyAccount {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  BankName     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Description  String
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @map("userId")
  transactions Transaction[]
}

model Transaction {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  date           DateTime
  type           Type
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @map("userId") @db.ObjectId
  amount         Float
  medium         Medium
  MoneyAccount   MoneyAccount @relation(fields: [moneyAccountId], references: [id])
  moneyAccountId String       @map("accountId") @db.ObjectId
  createdAt      DateTime     @default(now())
  narration      String?
  updatedAt      DateTime     @updatedAt
  reference      String?
  categories     String[]
  isArchived     Boolean      @default(false)
  description    String
  closingBalance Float
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  name      String
  icon      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
}

enum Medium {
  UPI
  NEFT
  RTGS
  IMPS
  CASH
  CHEQUE
  CREDIT_CARD
  DEBIT_CARD
  NET_BANKING
  OTHER
}

enum Type {
  UNKNOWN
  INCOME
  EXPENSE
  LENDING
  BORROWING
  MIDDLE_ACCOUNT_AMOUNT_TRANSFER
  TALLY_LENDING
  TALLY_BORROWING
  TALLY_MIDDLE_ACCOUNT_AMOUNT_TRANSFER
}
